"""Add graph and circuit tables

Revision ID: 589c785f6608
Revises: eccc3932804d
Create Date: 2024-12-11 17:25:55.449133

"""
from typing import Sequence, Union

import geoalchemy2
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '589c785f6608'
down_revision: Union[str, None] = 'eccc3932804d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('graph',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('crs', sa.Text(), nullable=False, comment='A shapely CRS in WKT format'),
    sa.PrimaryKeyConstraint('id'),
    mysql_engine='InnoDB'
    )
    op.create_table('circuit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User ID the circuit belongs to'),
    sa.Column('name', sa.String(length=250), nullable=True, comment='Activity name (May include spaces)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Activity description (May include spaces)'),
    sa.Column('distance', sa.Integer(), nullable=False, comment='Distance in meters'),
    sa.Column('start_time', sa.DateTime(), nullable=False, comment='Activity start date (datetime)'),
    sa.Column('start_point', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=False, comment='Activity end date (datetime)'),
    sa.Column('created_at', sa.DateTime(), nullable=False, comment='Activity creation date (datetime)'),
    sa.Column('elevation_gain', sa.Integer(), nullable=False, comment='Elevation gain in meters'),
    sa.Column('elevation_loss', sa.Integer(), nullable=False, comment='Elevation loss in meters'),
    sa.Column('average_speed', sa.DECIMAL(precision=4, scale=2), nullable=False, comment='Average speed meter per second (m/s)'),
    sa.Column('trace', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False, comment='A LINESTRING built from the GPS measured track, in WGS 84 lat/long (4326)'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    mysql_engine='InnoDB'
    )
    op.create_index('idx_circuit_start_point', 'circuit', ['start_point'], unique=False, postgresql_using='gist')
    op.create_index('idx_circuit_trace', 'circuit', ['trace'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_circuit_user_id'), 'circuit', ['user_id'], unique=True)
    op.create_table('node',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('graph_id', sa.Integer(), nullable=False),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.ForeignKeyConstraint(['graph_id'], ['graph.id'], ),
    sa.PrimaryKeyConstraint('id'),
    mysql_engine='InnoDB'
    )
    op.create_index('idx_node_location', 'node', ['location'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_node_graph_id'), 'node', ['graph_id'], unique=False)
    op.create_table('strava_link',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False, comment='User ID the strava link belongs to'),
    sa.Column('access_token', sa.Text(), nullable=False),
    sa.Column('refresh_token', sa.Text(), nullable=False),
    sa.Column('expires_at', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id'),
    mysql_engine='InnoDB'
    )
    op.create_index(op.f('ix_strava_link_user_id'), 'strava_link', ['user_id'], unique=True)
    op.create_table('edge',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('graph_id', sa.Integer(), nullable=False),
    sa.Column('source_id', sa.Integer(), nullable=False),
    sa.Column('target_id', sa.Integer(), nullable=False),
    sa.Column('key', sa.Integer(), nullable=False),
    sa.Column('geometry', geoalchemy2.types.Geometry(geometry_type='LINESTRING', srid=4326, from_text='ST_GeomFromEWKT', name='geometry', nullable=False), nullable=False),
    sa.Column('reversed', sa.Boolean(), nullable=False, comment='If True, the LINESTRING geometry shall be reversed in forward traversal'),
    sa.Column('length', sa.Integer(), nullable=False, comment='in meter'),
    sa.Column('positive_elevation', sa.Integer(), nullable=False, comment='in meter'),
    sa.Column('negative_elevation', sa.Integer(), nullable=False, comment='in meter'),
    sa.ForeignKeyConstraint(['graph_id'], ['graph.id'], ),
    sa.ForeignKeyConstraint(['source_id'], ['node.id'], ),
    sa.ForeignKeyConstraint(['target_id'], ['node.id'], ),
    sa.PrimaryKeyConstraint('id'),
    mysql_engine='InnoDB'
    )
    op.create_index('edge_index', 'edge', ['source_id', 'target_id', 'key'], unique=False)
    op.create_index('idx_edge_geometry', 'edge', ['geometry'], unique=False, postgresql_using='gist')
    op.create_index(op.f('ix_edge_graph_id'), 'edge', ['graph_id'], unique=False)
    op.create_index(op.f('ix_edge_source_id'), 'edge', ['source_id'], unique=False)
    op.create_index(op.f('ix_edge_target_id'), 'edge', ['target_id'], unique=False)
    op.create_table('circuit_edge',
    sa.Column('circuit_id', sa.Integer(), nullable=False),
    sa.Column('edge_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['circuit_id'], ['circuit.id'], ),
    sa.ForeignKeyConstraint(['edge_id'], ['edge.id'], ),
    sa.PrimaryKeyConstraint('circuit_id', 'edge_id')
    )
    op.create_index(op.f('ix_activation_user_id'), 'activation', ['user_id'], unique=True)
    op.drop_constraint('activation_ibfk_1', 'activation', type_='foreignkey')
    op.create_foreign_key(None, 'activation', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_index(op.f('ix_password_reset_user_id'), 'password_reset', ['user_id'], unique=True)
    op.drop_constraint('password_reset_ibfk_1', 'password_reset', type_='foreignkey')
    op.create_foreign_key(None, 'password_reset', 'user', ['user_id'], ['id'], ondelete='CASCADE')
    op.add_column('user', sa.Column('failed_logins', sa.Integer(), nullable=False))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('user', 'failed_logins')
    op.drop_constraint(None, 'password_reset', type_='foreignkey')
    op.create_foreign_key('password_reset_ibfk_1', 'password_reset', 'user', ['user_id'], ['id'])
    op.drop_index(op.f('ix_password_reset_user_id'), table_name='password_reset')
    op.drop_constraint(None, 'activation', type_='foreignkey')
    op.create_foreign_key('activation_ibfk_1', 'activation', 'user', ['user_id'], ['id'])
    op.drop_index(op.f('ix_activation_user_id'), table_name='activation')
    op.drop_table('circuit_edge')
    op.drop_index(op.f('ix_edge_target_id'), table_name='edge')
    op.drop_index(op.f('ix_edge_source_id'), table_name='edge')
    op.drop_index(op.f('ix_edge_graph_id'), table_name='edge')
    op.drop_index('idx_edge_geometry', table_name='edge', postgresql_using='gist')
    op.drop_index('edge_index', table_name='edge')
    op.drop_table('edge')
    op.drop_index(op.f('ix_strava_link_user_id'), table_name='strava_link')
    op.drop_table('strava_link')
    op.drop_index(op.f('ix_node_graph_id'), table_name='node')
    op.drop_index('idx_node_location', table_name='node', postgresql_using='gist')
    op.drop_table('node')
    op.drop_index(op.f('ix_circuit_user_id'), table_name='circuit')
    op.drop_index('idx_circuit_trace', table_name='circuit', postgresql_using='gist')
    op.drop_index('idx_circuit_start_point', table_name='circuit', postgresql_using='gist')
    op.drop_table('circuit')
    op.drop_table('graph')
    # ### end Alembic commands ###
